name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
- master

stages: 
- stage: Build
  variables:
    TF_IN_AUTOMATION: true
  jobs:
  - job:
    pool:
      vmImage: Ubuntu 16.04

    steps:
    - script: |
        # initialize the terraform workspace.
        # this will install the provider, setup the backend and download all referenced modules
        terraform init -input=false -no-color -backend-config="access_key=$(KEY-terraform-sa)" -backend-config="storage_account_name=$(terraform-sa)"
      displayName: Initialize terraform

    - script: |
        # validate the definition 
        terraform validate -no-color $(tfProviderArgs)
      displayName: Validate the code
        
    - script: |
        # create a new temporary workspace
        terraform workspace new build-$(Build.BuildNumber)
        terraform workspace select build-$(Build.BuildNumber)
      displayName: Create temporary workspace

    - script: |
        # generate a plan but do not include it in the published artifact
        # this plan is only generated in order to validate that the module will 'build' (it is a test)
        # the 'tfProviderArgs' parameter contains all variables needed to initialize the provider
        terraform plan -input=false -no-color -out=$(Common.TestResultsDirectory)/plan.tfplan $(tfProviderArgs)
      displayName: Generate test plan

    - script: |
        # convert the plan to json so that we can run unit tests against it
        terraform show --json $(Common.TestResultsDirectory)/plan.tfplan > $(Build.SourcesDirectory)/plan.json
      displayName: 'Convert plan to json'
      env:
        TF_IN_AUTOMATION: true

    - task: DotNetCoreCLI@2
      displayName: 'Run unittests'
      inputs:
        command: test
        publishTestResults: true
        workingDirectory: $(Build.SourcesDirectory)/tests/

    - script: |
        # remove the temporary workspace as it is no longer needed (cleanup)
        terraform workspace select default
        terraform workspace delete -force build-$(Build.BuildNumber)
      displayName: Remove temporary workspace
      condition: always()

    - task: CopyFiles@2
      inputs:
        targetFolder: $(Build.ArtifactStagingDirectory)
        contents: |
          **
          !.git/**/*
          !tests/**/*
          !.gitignore
          !*.yml
          !plan.json

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: terraform

- stage: Release  
  variables:
    TF_IN_AUTOMATION: true
  jobs:
  - deployment: test
    pool:
      vmImage: Ubuntu 16.04
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - template: deploy.yml
            parameters:
              environmentName: test
  - deployment: production
    pool:
      vmImage: Ubuntu 16.04
    environment: production
    dependsOn: approval
    strategy:
      runOnce:
        deploy:
          steps:
          - template: deploy.yml
            parameters:
              environmentName: production